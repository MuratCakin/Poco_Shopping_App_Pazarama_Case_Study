// Generated by Dagger (https://dagger.dev).
package com.muratcakin.poco.data.di;

import android.content.Context;
import com.muratcakin.poco.data.local.DataStoreManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LocalDataModule_ProvideDataStoreManagerFactory implements Factory<DataStoreManager> {
  private final LocalDataModule module;

  private final Provider<Context> appContextProvider;

  public LocalDataModule_ProvideDataStoreManagerFactory(LocalDataModule module,
      Provider<Context> appContextProvider) {
    this.module = module;
    this.appContextProvider = appContextProvider;
  }

  @Override
  public DataStoreManager get() {
    return provideDataStoreManager(module, appContextProvider.get());
  }

  public static LocalDataModule_ProvideDataStoreManagerFactory create(LocalDataModule module,
      Provider<Context> appContextProvider) {
    return new LocalDataModule_ProvideDataStoreManagerFactory(module, appContextProvider);
  }

  public static DataStoreManager provideDataStoreManager(LocalDataModule instance,
      Context appContext) {
    return Preconditions.checkNotNullFromProvides(instance.provideDataStoreManager(appContext));
  }
}
